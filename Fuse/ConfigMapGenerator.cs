using System.Collections.Generic;
using System;

namespace Fuze
{
	/// <summary>
	/// This class is responsible for creating a structure which represents an namespace in a træfik cluster. 
	/// This is one of multiple services, designed for a pipeline, so that a kubernetes cluster namespace can be spun up for testing with services/namespace/pods or replicationcontroller.
	/// </summary>
	public class ConfigMapGenerator
	{
		/// <summary>
		/// Creates an configmap rule for a given pipeline.
		/// </summary>
		/// <param name="path">Path to save file</param>
		/// <param name="name">Ingress name</param>
		public List<string> CreateConfigMap(string name, string envName, List<Dictionary<string,string>> configMaps)
		{

			#region Conventions for configmap
			string nameSpace = string.Format("{0}-{1}", name, envName);
			#endregion			

			List<string> file = new List<string>();
			file = WriteConfigMapMetadata(file, name, envName, nameSpace);

			foreach (var configMap in configMaps) {
				foreach (var config in configMap) {

					#region Conventions for configmap
					string keyName = string.Format("{0}-value", config.Key);
					#endregion			

					file = WriteConfigMapSpec(file, keyName, config.Value);
				}
			}

			return file;
		}

		/// <summary>
		/// Writes in this format to file: 
		/// 
		/// apiVersion: v1
		/// kind: ConfigMap
		/// metadata:
		///   name: key-value
		///   namespace: foo-env
		///   
		/// </summary>
		/// <param name="file">The structure of the file to write to, in this context its an service yml.</param>
		/// <param name="appName">Name for the service in the kubernetes cluster</param>
		List<string> WriteConfigMapMetadata(List<string> file, string appName, string envName, string nameSpace)
		{
			SharedMethods indent = new SharedMethods();
			file.Add("apiVersion: v1");
			file.Add("kind: ConfigMap");
			file.Add("metadata:");
			file.Add(indent.Padding(1, string.Format("name: {0}", appName)));
			file.Add(indent.Padding(1, string.Format("namespace: {0}", nameSpace)));
			file.Add(indent.Padding(1, "labels:"));			
			file.Add(indent.Padding(2, string.Format("app: {0}", appName)));
			file.Add(indent.Padding(2, "autoGenerated: true"));
			file.Add(indent.Padding(2, string.Format("generated: {0}", DateTime.Now)));				

			return file;
		}

		/// <summary>
		/// Writes in this format to file: 
		/// 
		/// data:
  		///   key.name: key.value
		///  
		/// Note that the targetPort can be any chosen port, it just needs to map to the pod exposed port.
		/// </summary>
		/// <param name="file">The structure of the file to write to, in this context its an service yml.</param>
		/// <param name="targetPort">The pod exposed on the deployed pods.</param>
		/// <param name="deploymentName">Name for the deployment in kubernetes.</param>
		/// <param name="appName">Name for the service in the kubernetes cluster</param>
		List<string> WriteConfigMapSpec(List<string> file, string keyName, string value)
		{
			SharedMethods indent = new SharedMethods();
			file.Add("data:");
			file.Add(indent.Padding(1, string.Format("{0}: {1}", keyName, value)));

			return file;
		}
	}
}
